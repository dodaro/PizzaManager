package it.unical.pizzamanager.persistence.dto;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;


@Entity
@Table(name = "users")
@SequenceGenerator(name = "usersGenerator", sequenceName = "usersSequence", initialValue = 1)
public class User implements Serializable {

	private static final long serialVersionUID = -3757655889200619517L;

	private static final int NO_ID = -1;

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "usersGenerator")
	@Column(name = "id")
	private Integer id;

	@Column(name = "email", length = 255, unique = true, nullable = false)
	private String email;

	@Column(name = "password", length = 255, unique = true, nullable = false)
	private String password;
	
	@Column(name = "LastLocation", length = 255, nullable = false/*???*/)  //nullable????
	private String lastLocation;
	
	@OneToMany(mappedBy = "user", fetch = FetchType.EAGER)
	@OnDelete(action = OnDeleteAction.CASCADE)
	private List<Payment> payments;
	
	@OneToMany(mappedBy = "user", fetch = FetchType.EAGER)
	@OnDelete(action = OnDeleteAction.CASCADE)
	private List<Feedback> feedbacks;
	
	@OneToMany(mappedBy = "user", fetch = FetchType.EAGER)
	@OnDelete(action = OnDeleteAction.CASCADE)
	private List<Favourites> favourites;
	
	@OneToOne(mappedBy = "user", fetch = FetchType.EAGER)
	@OnDelete(action = OnDeleteAction.CASCADE)
	private List<Cart> cart;

	public User() {
		this.id = NO_ID;
		this.email = "";
		this.password = "";
		lastLocation="";
		payments = new ArrayList<Payment>();
		feedbacks = new ArrayList<Feedback>();
		favourites = new ArrayList<Favourites>();
	}

	/*
	 * This constructor doesn't need to set an id since it will be automatically generated by the
	 * DBMS.
	 */
	public User(String email, String password, String lastLocation, List<Payment> payments, List<Feedback> feedbacks, List<Favourites> favourites) {
		this.id = NO_ID;
		this.email = email;
		this.password = password;
		this.lastLocation = lastLocation;
		this.payments = payments;
		this.feedbacks = feedbacks;
		this.favourites = favourites;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getLastLocation() {
		return lastLocation;
	}

	public void setLastLocation(String lastLocation) {
		this.lastLocation = lastLocation;
	}

	public void setPayment(List<Payment> payments) {
		this.payments = payments;
	}
	
	public List<Payment> getPayments() {
		return payments;
	}
	
	public void setFeedback(List<Feedback> feedbacks) {
		this.feedbacks = feedbacks;
	}
	
	public List<Feedback> getFeedbacks() {
		return feedbacks;
	}
	
	public void setFavourites(List<Favourites> favourites) {
		this.favourites = favourites;
	}
	
	public List<Favourites> getFavourites() {
		return favourites;
	}
	
	@Override
	public String toString() {
		return "User " + id + ": email = " + email + ", password = " + password;
	}
}